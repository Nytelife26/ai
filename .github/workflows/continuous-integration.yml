name: Continuous Integration

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  Building:
    name: Compile source code
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        node: [12, 14, 16]
        os: [ubuntu-latest, windows-latest, macOS-latest]
    steps:
      - name: Checkout Project
        uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: Add problem matcher
        run: echo "::add-matcher::.github/problemMatchers/tsc.json"
      - name: Use Node.js v${{ matrix.node }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node }}
      - name: Restore CI Cache
        uses: actions/cache@v2.1.6
        with:
          path: node_modules
          key: ${{ runner.os }}-${{ matrix.node }}-${{ hashFiles(matrix.os == 'windows-latest' && '**\yarn.lock' || '**/yarn.lock') }}
      - name: Install Dependencies
        run: yarn --frozen-lockfile
      - name: Build Code
        run: yarn build

  Testing:
    name: Unit Tests
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        node: [12, 14, 16]
        os: [ubuntu-latest, windows-latest, macOS-latest]
    steps:
      - name: Checkout Project
        uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: Use Node.js ${{ matrix.node }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node }}
      - name: Restore CI Cache
        uses: actions/cache@v2.1.6
        with:
          path: node_modules
          key: ${{ runner.os }}-${{ matrix.node }}-${{ hashFiles(matrix.os == 'windows-latest' && '**\yarn.lock' || '**/yarn.lock') }}
      - name: Install Dependencies
        run: yarn --frozen-lockfile
      - name: Setup CMake
        uses: jwlawson/actions-setup-cmake@v1.8
        with:
          cmake-version: '3.16.x'
      - name: Build C++ tests
        run: mkdir build-tests && cd build-tests && cmake .. && cmake --build . && cd ..
      - name: Run tests
        run: yarn test
      - name: Run C++ Tests
        shell: bash
        run: |
          if [ "$RUNNER_OS" == "Windows" ]; then
            ./build-tests/Debug/skyra_ai_tests.exe
          else
            ./build-tests/skyra_ai_tests
          fi
